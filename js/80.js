"use strict";(self.webpackChunkart_quiz=self.webpackChunkart_quiz||[]).push([[80],{620:(t,e,s)=>{s.d(e,{g:()=>a});const a=new class{async getTopics(){return this.topics||(this.topics=await(await fetch("./assets/topics.json")).json()),this.topics}async getCategoriesFor(t){return await this.getTopics(),this.topics[t].categories||(this.topics[t].categories=await(await fetch(`./assets/topics/${t}/categories.json`)).json()),this.topics[t].categories}async getItemsFor(t){return await this.getTopics(),this.topics[t].items||(this.topics[t].items=await(await fetch(`./assets/topics/${t}/items.json`)).json()),this.topics[t].items}async getRoundTemplates(){return this.roundTemplates||(this.roundTemplates=await(await fetch("./assets/round.json")).json()),this.roundTemplates}}},888:(t,e,s)=>{s.d(e,{Z:()=>a});const a=new class{constructor(){this.supportedLocales=["be","en"],this.locale="en"}setLocale(t){if(!this.supportedLocales.includes(t))throw new Error("Unsupported language tag passed");this.locale=t,document.dispatchEvent(new CustomEvent("localechange"))}getLocale(){return this.locale}}},684:(t,e,s)=>{s.d(e,{Z:()=>a});const a={replace:(t,e)=>t?Object.values(t.match(/(?<={{).*?(?=}})/g)).reduce(((t,s)=>t.replace(`{{${s}}}`,e[s])),t):""}},350:(t,e,s)=>{s.d(e,{G:()=>i});var a=s(684);class i{constructor({viewName:t,funcs:e}){if(!t||!e?.getContext)throw new Error("You must pass required arguments in View constructor");this.viewName=t,this.funcs=e}async getTemplate(){return this.template||(this.template=await(await fetch(`./views/${this.viewName}.html`)).text()),this.template}async getFormattedTemplate(t){return a.Z.replace(await this.getTemplate(),await this.runFunc("getContext",t))}runFunc(t,e){return this.funcs[t]?.apply(this,[e])}}},80:(t,e,s)=>{s.r(e),s.d(e,{view:()=>n});var a=s(350),i=s(684),r=s(620),c=s(888);const n=new a.G({viewName:"results",funcs:{async beforeLoad(){await r.g.getTopics()},getContext:async()=>localStorage.getItem("matches")?{results:(await Promise.all(JSON.parse(localStorage.getItem("matches")).map((async t=>{const e=(await r.g.getCategoriesFor(t.topic))[t.category];return i.Z.replace('\n            <li class="cards__item results__item">\n              <a class="result__link">\n                <div class="result__datetime">{{datetime}}</div>\n                <div class="result__topic">{{topic}}</div>\n                <img class="result__image" src="{{imageUrl}}">\n                <div class="result__category">{{category}}</div>\n                <div class="result__answers">{{rightAnswers}}/{{answersAmount}}</div>\n              </a>\n            </li>',{topic:e.name[c.Z.getLocale()],imageUrl:t.imageUrl,category:e.name[c.Z.getLocale()],rightAnswers:t.rounds.filter((({userAnswer:t,rightAnswer:e})=>t===e)).length,answersAmount:t.rounds.length,datetime:new Date(t.endTime).toLocaleString()})})))).reverse().join("")}:{results:(await r.g.getTopics()).results.empty[c.Z.getLocale()]}}})}}]);